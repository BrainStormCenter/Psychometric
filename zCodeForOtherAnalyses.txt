%%%%%%%%%%%%%%%%%%%%%%   OTHER ANALYSES    %%%%%%%%%%%%%%%%%%%%%%




%     FIND COMMON ELEMENTS IN MATRICES AND PUT THEM INTO ANOTHER MATRIX

z1 = [15,2;16,2;10,5;9,6;10,6;17,9;18,9;11,10;17,10;18,10;18,11;18,15;24,19;23,20;24,20];
z2 = [16,2;10,5;9,6;10,6;17,9;18,9;17,10;18,10;16,11;18,15;23,19;24,19;23,20;24,20;23,22;24,22];
z3 = find(ismember(z1,z2,'rows'))
z4 = [];
for i=1:numel(z3)
  z4(i,:) = z1(z3(i),:)
end

for i=1:numel(z3)
z4 = [z4;[z1(z3(i)),z1(z3(i),2)]];
end


for i=1:numel(z3)
  z4(i,:) = z1(z3(i),:)
end








%              RUNNING A STEPWISE REGRESSION USING stepwiselm (WITH A TABLE)

%              RUNNING MULTIPLE LINERAR REGRESSION USING fitlm (WITHOUT A TABLE)
%
%              DECALRE A STRUCT TO HOLD ALL THE RESULTS FROM THE fitlm LOOP
% LM = struct();
% for i=1:numel(I);
%      node1 = I(i);
%      node2 = J(i);
%      roi1num = num2str(I(i));
%      roi1str = painnames(I(i),:);
%      roi2num = num2str(J(i));
%      roi2str = painnames(J(i),:);
%      xVars = [psqiData(:, 3:5)];
%      % nodePairs = [nodePairs, roi1str, roi2str, sprintf('\n')];
%      Y = mean(squeeze(painzgfcccs(node1, node2, :, 1, :)), 2);
%      %
%      % LM.(strcat('rois')) = [nodePairs, node1, node2];
%      % % {roi1str, roi2str};
%      LM.(strcat('lm', num2str(i))) = fitlm(xVars,Y);
%
% end
%
% %         OUTPUT THE OVERALL F AND P-VALUES FOR EACH MODEL
% for i=1:numel(I);
% ztbl2 = anova(LM.(strcat('lm', num2str(i))), 'summary');
% modelSummary(i, :) = ztbl2(2,4:5);
% end
%

% zlm = fitlm(tablePsqiPlusROI, 'Y~TiB_hrs+SoL_min+WASO_min')

% tablePSQI = array2table(psqiData, 'VariableNames',psqiNames)





% X2 = [psqiData(:, 3:5)];
% lm= fitlm(X2,Y);
% lm

% Linear regression model:
%     y ~ 1 + x1 + x2 + x3
%
% Estimated Coefficients:
%                     Estimate          SE         tStat     pValue
%                    ___________    __________    _______    _______
%
%     (Intercept)       -0.09716       0.12003    -0.8095    0.42049
%     x1              0.00039373    0.00085143    0.46244    0.64495
%     x2             -0.00031876    0.00029569     -1.078    0.28407
%     x3                0.013969      0.015571    0.89715    0.37217
%
%
% Number of observations: 89, Error degrees of freedom: 85
% Root Mean Squared Error: 0.145
% R-squared: 0.0378,  Adjusted R-Squared 0.00388
% F-statistic vs. constant model: 1.11, p-value = 0.348

% AJ: Consider running stepwise REGRESSION
% [BB,SE,PVAL,INCLUDE,NEXTSTEP,HISTORY]=stepwisefit(X,Y);
% NOTE:  stepwise fit automatically adds a constant column of ones;
%  (so you don't have to...)


% If you want to test relationship only in group 1
%     i1 = group 1 SUBJECTS
% X = [ones(size(BEHAVIOR)) BEHAVIOR];
% Y = mean(squeeze(painzgfcccs(node1, node2, :, 1, :)), 2);
% X = X(i1,:)
% Y = Y(i1,:)

% for i=1:numel(I)
%      node1=I(i);
%      node2=J(i);
%      for behavior_index=3:5 %14 %2:5%numel(psqiNames) % skip first column, which is ID
%           BEHAVIOR = psqiData(:,behavior_index);
%           BEHAVIOR_label=psqiNames{behavior_index};
%           X = [ones(size(BEHAVIOR)) BEHAVIOR];
%           Y = mean(squeeze(painzgfcccs(node1, node2, :, 1, :)), 2);
%            X3 = X(i4,:);        % REGRESSION FOR ONLY GROUP 2
%            Y3 = Y(i4,:);        % REGRESSION FOR ONLY GROUP 2
%           % X3 = X;
%           % Y3 = Y;
%           [B3,BINT3,R3,RINT3,STATS3] = regress(Y3,X3);
%           % B(1) is beta for constant term; B(2) is beta for behavioral
%           % STATS lists (1) R2, (2) F stat, (3) p-value, (4) error variance
%           % can estimate t-value as square-root of F-stat times sign of B(2) (+ or -)
%
%           % scatterplot
%           % if P<0.05 (uncorrected)
%           %   scatterplot of relationship
%           if STATS3(3) < 0.05
%                figure
%                plot(X3(:,2),Y3,'k+');
%                hold on
%                l = lsline;
%                set(l,'LineWidth',2)
%                xlabel(psqiNames{behavior_index})
%                ylabel(['RS-FC of ROI' num2str(node1) '-ROI' num2str(node2)])
%                R2=STATS3(1);
%                xposition = max(X3(:,2)) - 0.1*range(X3(:,2));
%                yposition = max(Y3) - 0.1*range(Y3);
%                text(xposition,yposition,['R^2 = ' sprintf('%0.3f',R2)])
%           end
%
%           Regress_P_out3(i,behavior_index) = STATS3(3);
%           Regress_T_out3(i,behavior_index) = sqrt(STATS3(2))*sign(B3(2));
%           Regress_B_out3(i,behavior_index) = B3(2);
%           % Note: in line 287, we are looping through variables 3-5
%           % in line 317, we are assigning to columns 3-5
%           % therefore, columns 1 and 2 will be empty (all zeros)
%           %
%           % You can change code so that line 316 assigns to (behavior_index-2), but this could cause problems later
%           % Recommend keep as is
%           %
%           % So each row of Regress_B_out is a different ROI-to-ROI pairs
%           % and each column corresponds to a variable in psqiData (if tested)
%           % For example: we did not test variable #1 (subject ID), so this column is all zeros
%
%      end
% end


% Method B:  multiple linear regression
% As simple, but reading in all behaviors

% psqiNames = {'ID','TiB_hrs', 'SoL_min','WASO_min','TST_hrs','SleepEfficiency','psqi_Durat','psqi_Distb', ...
%               'psqi_Latency','psqi_DayDys','psqi_SE','psqi_BadSQual','psqi_Meds','PSQI_total'}
% for i=1:numel(I)
%      node1=I(i);
%      node2=J(i);
%      Y = mean(squeeze(painzgfcccs(node1, node2, :, 1, :)), 2);
%      % X = [psqiData(:,2:end)]; % note: only doing 2-5 due to multicollinarity - address later
%      X = [psqiData(:,2:5)];
%      lm= fitlm(X,Y);
%      % B(1) is beta for constant term; B(2) is beta for behavioral
%      % STATS lists (1) R2, (2) F stat, (3) p-value, (4) error variance
%      % can estimate t-value as square-root of F-stat times sign of B(2) (+ or -)
%
%      % scatterplot
%      % if P<0.05 (uncorrected)
%      %   scatterplot of relationship
% end



%%
%         THERE IS A SIGNIGCANT MAIN EFFECT FOR GROUP
%         BOTH PAIN GROUPS DIFFER FROM THE HC GROUP
%         NEITHER PAIN GROUP DIFFERES FROM EACH OTHER
%         GOING FORWARD, COLLAPSING ACROSS PAIN GROUPS
%%











%
%
% %%             SYNTAX FOR PERFORMING A MANOVA
% %              START BY CREATING A VECTOR REPRESENTING ALL THE GROUPS
% gp1 = ones(length(i1),1);
% gp2 = 2*ones(length(i2),1);
% gp3 = 3*ones(length(i3),1);
% gps123 = cat(1,gp1,gp2,gp3);
% groups = nominal(gps123);               % SPECIFY THIS AS AN ORDINAL VARIABLE
% groups = setlabels(groups,{'HC','CLBP','FM'});    % SET THE VARIABLE LABELS
% prePain123 = cat(1,prePainHC, prePainCLBP,prePainFM);  % CREATE ANOTHER VECTOR TO INCLUDE
% %              RUN THE MANOVA
% [d,p,stats] = manova1(prePain123,groups)
%

% as a one-sample t-test
%
%
%
%
%
%
%
%                   END SCRIPT
% for node1 = 1:16
%     for node2 = 1:16

%         THIS CREATES A MEAN CORRELATION MATRIX FOR THE PAIN ROIS OF EACH GROUP
% for node1 = 1:length(pain)
%      for node2 = 1:length(pain)
%         prePainHC = mean(squeeze(painzgfcccs(node1, node2, i1, 1, :)), 2);
%         prePainCLBP = mean(squeeze(painzgfcccs(node1, node2, i2, 1, :)), 2);
%         prePainFM = mean(squeeze(painzgfcccs(node1, node2, i3, 1, :)), 2);
% %
% %         % place the code between lines 116 and 131 here
%         gpNames = {'HC','CLBP','FM'};               % VARIABLE OF GROUP NAMES
% %       STEP 2 = CREATE AN ARRAY OF THE COMBINED VARIABLES FROM ABOVE
% %       THE ARRAY NEEDS TO BE PADDED BECAUSE OF UNEVEN GROUP SIZES
% %       IDENTIFY THE LARGEST GROUP
%         A = max([length(i1),length(i2),length(i3)]);
%         A = zeros(A,3);    % INITIALIZE ARRAY OF ALL ZEROS  FOR LARGEST GROUP
%         A(A == 0) = NaN;    % CONVERT ALL '0' TO 'NaN' (MISSING VALUES)
%         A(1:length(prePainHC),1) = prePainHC;       % HC TO COLUMN 1
%         A(1:length(prePainCLBP),2) = prePainCLBP;   % CLBP TO COLUMN 2
%         A(1:length(prePainFM),3) = prePainFM;       % FM TO COLUMN 3
% %       STEP 3 = RUNNING THE ANOVA AND MULTIPLE COMPARISONS
% %       CREATE A TABLE OF OVERALL F-TEST
%         [p,tbl,stats] = anova1(A,gpNames, 'off');      % TABLE OF OVERALL RESULTS
% %         ftestNames = tbl(1,:);                  % VARIABLE NAMES FOR THE TABLE
% %         ftestNames{1,6} = 'Prob_F';             % FIX THE SYMBOL ISSUE
% %         tableFtest = array2table(tbl(2:4,:),'VariableNames',ftestNames);
%         pain_anovaresults_effect(node1, node2) = cell2mat(tbl(2,5)); % THESE ARE F-VALUES
%         pain_anovaresults_pvalue(node1, node2) = p;
%     end
% end


%painzgfcccs = zgfcccs(1:16, 1:16, :, :, :);
%dmnzgfcccs = zgfcccs(17:22, 17:22, :, :, :);


%%
%    THESE ARE THE CCs FOR ALL 90 SUBJECTS ACROSS THE 16 PAIN REGIONS
%    painnet = squeeze(sum(sum(painzgfcccs, 1), 2)) ./ (16 * 15);
%    THESE ARE THE CCs FOR ALL 90 SUBJECTS ACROSS THE 6 DMN REGIONS
%    dmnnet = squeeze(sum(sum(dmnzgfcccs, 1), 2)) ./ (6 * 5);


%get left amygdala (region 2) to left anterior insula (region 8) from pain network
%pain_lamyg_2_linsula = squeeze(painzgfcccs(2, 8, :, :, :));


%pain_anovaresults_effect = zeros(16, 16);
%pain_anovaresults_pvalue = zeros(16, 16);
%}


% from the anova lookin at all pairs
% Anova_Overall_PainPre.pain_anovaresults_effect = zeros(length(painvoi),length(painvoi));
% Anova_Overall_PainPre.pain_anovaresults_pvalue = zeros(length(painvoi),length(painvoi));

% computing the ANOVA for all pairs

%Pain.Pre.roi2roi.anova_output1 = [];
%Pain.Pre.roi2roi.anova_output1 = [Pain.Pre.roi2roi.anova_output1 'These ROIs CCs differ between groups:' sprintf('\t') sprintf('\n')];


% Pain.Pre.roi2roi.anova_output1
%this_tval1 = '20'; % pain_ttest_tval(I(i),J(i));

% prePainHC = mean(squeeze(painzgfcccs(node1, node2, i1, 1, :)), 2);
% prePainCLBP = mean(squeeze(painzgfcccs(node1, node2, i2, 1, :)), 2);
% prePainFM = mean(squeeze(painzgfcccs(node1, node2, i3, 1, :)), 2);
% prePainGps = mean(squeeze(painzgfcccs(node1, node2, i4, 1, :)), 2);     % BOTH CP GROUPS
% gpNames = {'HC','CLBP','FM'};           % VARIABLE: GROUP NAMES
% gpNames2 = {'HC','Pain'};               % VARIABLE: GROUP NAMES COLLAPSED ACROSS CP GROUPS
%       STEP 2 = CREATE AN ARRAY OF THE COMBINED VARIABLES FROM ABOVE
%       THE ARRAY NEEDS TO BE PADDED BECAUSE OF UNEVEN GROUP SIZES
%       IDENTIFY THE LARGEST GROUP
% A = max([length(i1),length(i2),length(i3)]);
% A = zeros(A,3);    % INITIALIZE ARRAY OF ALL ZEROS  FOR LARGEST GROUP
% A(A == 0) = NaN;    % CONVERT ALL '0' TO 'NaN' (MISSING VALUES)
% A(1:length(prePainHC),1) = prePainHC;       % HC TO COLUMN 1
% A(1:length(prePainCLBP),2) = prePainCLBP;   % CLBP TO COLUMN 2
% A(1:length(prePainFM),3) = prePainFM;       % FM TO COLUMN 3
%       STEP 3 = RUNNING THE ANOVA AND MULTIPLE COMPARISONS
%       CREATE A TABLE OF OVERALL F-TEST
%[p,tbl,stats] = anova1(A,gpNames, 'off');      % TABLE OF OVERALL RESULTS
% [H_PainPre,P_PainPre,CI_PainPre,STATS_PainPre] = ttest2(prePainHC,prePainGps);           % 2 SAMPLE T-TEST
%         ftestNames = tbl(1,:);                  % VARIABLE NAMES FOR THE TABLE
%         ftestNames{1,6} = 'Prob_F';             % FIX THE SYMBOL ISSUE
%         tableFtest = array2table(tbl(2:4,:),'VariableNames',ftestNames);
% pain_anovaresults_effect(node1, node2) = cell2mat(tbl(2,5)); % THESE ARE F-VALUES
% pain_anovaresults_pvalue(node1, node2) = p;
% ttest_tval_PainPre(node1, node2) = STATS_PainPre.tstat; % tstat
% ttest_pval_PainPre(node1, node2) = P_PainPre; % pvalue

% OUT_Text_PainPre = [OUT_Text_PainPre roi1str ' (#' roi1num ') with ' roi2str ' (#' roi2num ')' sprintf('\t') ...
%  't-score: ' num2str(PainROI_tval) sprintf('\t') ' p-value: ' sprintf('%0.05f',PainROI_pval) ...
%  sprintf('\n') ];
% OUT_Text_PainPre = [OUT_Text_PainPre roi1str '(#',roi1num,') with ',roi2str '(#', roi2num ')' ...
% 't-score: ' num2str(PainROI_tval) ' p-value: ' sprintf('%0.05f',PainROI_pval) ...
% sprintf('\n') ];

%dlmwrite('PainRoiTtest_PainPre.txt',OUT_Text_PainPre,'')

% file_id1 = fopen([rootpath 'GpFCdiffs_',datestr(now, 'yyyy-mm-dd_HH:MM'),'.txt'], 'w');

%imagesc(ttest_tval_PainPre);colorbar;colormap('jet');


%{
psqiPlusRoiNames2 = [psqiNames, 'Ypair'];
for i=1:numel(I);
     node1 = I(i);
     node2 = J(i);
     % roi1num = num2str(I(i));
     % roi2num = num2str(J(i));
     % roi1str = painnames3(I(i),:);
     % roi2str = painnames3(J(i),:);
     % Ypair = strcat(roi1str,'_',roi2str);
     % psqiPlusRoiNames = [psqiNames, Ypair];
     Y = mean(squeeze(painzgfcccs(node1, node2, :, 1, :)), 2);
     psqiPlusROI = [psqiData, Y];
     tablePsqiPlusROI = array2table(psqiPlusROI, 'VariableNames',psqiPlusRoiNames2);
     Pain.Pre.fitLM.(strcat('roipair.', num2str(i))) = fitlm(tablePsqiPlusROI, 'Y~TiB_hrs+SoL_min+WASO_min');
end
%}
%

%psqiPlusRoiNames2 = [psqiNames, 'Ypair'];

% psqiPlusROI = [psqiData];
% tablePsqiPlusROI = array2table(psqiPlusROI, 'VariableNames',psqiPlusRoiNames);
% tablePsqiPlusROI.GP = nominal(tablePsqiPlusROI.GP)

%


%    zRSquared = [zmdl1.Rsquared.Adjusted, zmdl2.Rsquared.Adjusted, zmdl3.Rsquared.Adjusted]
